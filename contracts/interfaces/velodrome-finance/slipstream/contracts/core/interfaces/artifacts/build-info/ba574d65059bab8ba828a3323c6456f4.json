{
	"id": "ba574d65059bab8ba828a3323c6456f4",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.29-nightly.2024.11.22",
	"solcLongVersion": "0.8.29-nightly.2024.11.22+commit.46e1f81b",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200000,
				"details": {
					"peephole": true,
					"inliner": true,
					"jumpdestRemover": true,
					"orderLiterals": true,
					"deduplicate": true,
					"cse": true,
					"constantOptimizer": true,
					"simpleCounterForLoopUncheckedIncrement": true,
					"yul": true,
					"yulDetails": {
						"stackAllocation": true
					}
				}
			},
			"evmVersion": "cancun",
			"viaIR": true,
			"debug": {
				"revertStrings": "default",
				"debugInfo": []
			},
			"metadata": {
				"appendCBOR": false,
				"useLiteralContent": true,
				"bytecodeHash": "none"
			},
			"outputSelection": {
				"*": {
					"*": [
						"evm.bytecode",
						"abi"
					]
				}
			},
			"remappings": []
		},
		"sources": {
			"interfaces/velodrome-finance/slipstream/contracts/core/interfaces/ICLFactory.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n// import {IVoter} from \"contracts/core/interfaces/IVoter.sol\";\n// import {IFactoryRegistry} from \"contracts/core/interfaces/IFactoryRegistry.sol\";\n\n/// @title The interface for the CL Factory\n/// @notice The CL Factory facilitates creation of CL pools and control over the protocol fees\ninterface ICLFactory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when the swapFeeManager of the factory is changed\n    /// @param oldFeeManager The swapFeeManager before the swapFeeManager was changed\n    /// @param newFeeManager The swapFeeManager after the swapFeeManager was changed\n    event SwapFeeManagerChanged(address indexed oldFeeManager, address indexed newFeeManager);\n\n    /// @notice Emitted when the swapFeeModule of the factory is changed\n    /// @param oldFeeModule The swapFeeModule before the swapFeeModule was changed\n    /// @param newFeeModule The swapFeeModule after the swapFeeModule was changed\n    event SwapFeeModuleChanged(address indexed oldFeeModule, address indexed newFeeModule);\n\n    /// @notice Emitted when the unstakedFeeManager of the factory is changed\n    /// @param oldFeeManager The unstakedFeeManager before the unstakedFeeManager was changed\n    /// @param newFeeManager The unstakedFeeManager after the unstakedFeeManager was changed\n    event UnstakedFeeManagerChanged(address indexed oldFeeManager, address indexed newFeeManager);\n\n    /// @notice Emitted when the unstakedFeeModule of the factory is changed\n    /// @param oldFeeModule The unstakedFeeModule before the unstakedFeeModule was changed\n    /// @param newFeeModule The unstakedFeeModule after the unstakedFeeModule was changed\n    event UnstakedFeeModuleChanged(address indexed oldFeeModule, address indexed newFeeModule);\n\n    /// @notice Emitted when the defaultUnstakedFee of the factory is changed\n    /// @param oldUnstakedFee The defaultUnstakedFee before the defaultUnstakedFee was changed\n    /// @param newUnstakedFee The defaultUnstakedFee after the unstakedFeeModule was changed\n    event DefaultUnstakedFeeChanged(uint24 indexed oldUnstakedFee, uint24 indexed newUnstakedFee);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(address indexed token0, address indexed token1, int24 indexed tickSpacing, address pool);\n\n    /// @notice Emitted when a new tick spacing is enabled for pool creation via the factory\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools\n    /// @param fee The default fee for a pool created with a given tickSpacing\n    event TickSpacingEnabled(int24 indexed tickSpacing, uint24 indexed fee);\n\n    /// @notice The voter contract, used to create gauges\n    /// @return The address of the voter contract\n    // function voter() external view returns (IVoter);\n\n    /// @notice The address of the pool implementation contract used to deploy proxies / clones\n    /// @return The address of the pool implementation contract\n    function poolImplementation() external view returns (address);\n\n    /// @notice Factory registry for valid pool / gauge / rewards factories\n    /// @return The address of the factory registry\n    // function factoryRegistry() external view returns (IFactoryRegistry);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the current swapFeeManager of the factory\n    /// @dev Can be changed by the current swap fee manager via setSwapFeeManager\n    /// @return The address of the factory swapFeeManager\n    function swapFeeManager() external view returns (address);\n\n    /// @notice Returns the current swapFeeModule of the factory\n    /// @dev Can be changed by the current swap fee manager via setSwapFeeModule\n    /// @return The address of the factory swapFeeModule\n    function swapFeeModule() external view returns (address);\n\n    /// @notice Returns the current unstakedFeeManager of the factory\n    /// @dev Can be changed by the current unstaked fee manager via setUnstakedFeeManager\n    /// @return The address of the factory unstakedFeeManager\n    function unstakedFeeManager() external view returns (address);\n\n    /// @notice Returns the current unstakedFeeModule of the factory\n    /// @dev Can be changed by the current unstaked fee manager via setUnstakedFeeModule\n    /// @return The address of the factory unstakedFeeModule\n    function unstakedFeeModule() external view returns (address);\n\n    /// @notice Returns the current defaultUnstakedFee of the factory\n    /// @dev Can be changed by the current unstaked fee manager via setDefaultUnstakedFee\n    /// @return The default Unstaked Fee of the factory\n    function defaultUnstakedFee() external view returns (uint24);\n\n    /// @notice Returns a default fee for a tick spacing.\n    /// @dev Use getFee for the most up to date fee for a given pool.\n    /// A tick spacing can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param tickSpacing The enabled tick spacing. Returns 0 if not enabled\n    /// @return fee The default fee for the given tick spacing\n    function tickSpacingToFee(int24 tickSpacing) external view returns (uint24 fee);\n\n    /// @notice Returns a list of enabled tick spacings. Used to iterate through pools created by the factory\n    /// @dev Tick spacings cannot be removed. Tick spacings are not ordered\n    /// @return List of enabled tick spacings\n    function tickSpacings() external view returns (int24[] memory);\n\n    /// @notice Returns the pool address for a given pair of tokens and a tick spacing, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param tickSpacing The tick spacing of the pool\n    /// @return pool The pool address\n    function getPool(address tokenA, address tokenB, int24 tickSpacing) external view returns (address pool);\n\n    /// @notice Return address of pool created by this factory given its `index`\n    /// @param index Index of the pool\n    /// @return The pool address in the given index\n    function allPools(uint256 index) external view returns (address);\n\n    /// @notice Returns the number of pools created from this factory\n    /// @return Number of pools created from this factory\n    function allPoolsLength() external view returns (uint256);\n\n    /// @notice Used in VotingEscrow to determine if a contract is a valid pool of the factory\n    /// @param pool The address of the pool to check\n    /// @return Whether the pool is a valid pool of the factory\n    function isPair(address pool) external view returns (bool);\n\n    /// @notice Get swap & flash fee for a given pool. Accounts for default and dynamic fees\n    /// @dev Swap & flash fee is denominated in pips. i.e. 1e-6\n    /// @param pool The pool to get the swap & flash fee for\n    /// @return The swap & flash fee for the given pool\n    function getSwapFee(address pool) external view returns (uint24);\n\n    /// @notice Get unstaked fee for a given pool. Accounts for default and dynamic fees\n    /// @dev Unstaked fee is denominated in pips. i.e. 1e-6\n    /// @param pool The pool to get the unstaked fee for\n    /// @return The unstaked fee for the given pool\n    function getUnstakedFee(address pool) external view returns (uint24);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param tickSpacing The desired tick spacing for the pool\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. The call will\n    /// revert if the pool already exists, the tick spacing is invalid, or the token arguments are invalid\n    /// @return pool The address of the newly created pool\n    function createPool(address tokenA, address tokenB, int24 tickSpacing, uint160 sqrtPriceX96)\n        external\n        returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Updates the swapFeeManager of the factory\n    /// @dev Must be called by the current swap fee manager\n    /// @param _swapFeeManager The new swapFeeManager of the factory\n    function setSwapFeeManager(address _swapFeeManager) external;\n\n    /// @notice Updates the swapFeeModule of the factory\n    /// @dev Must be called by the current swap fee manager\n    /// @param _swapFeeModule The new swapFeeModule of the factory\n    function setSwapFeeModule(address _swapFeeModule) external;\n\n    /// @notice Updates the unstakedFeeManager of the factory\n    /// @dev Must be called by the current unstaked fee manager\n    /// @param _unstakedFeeManager The new unstakedFeeManager of the factory\n    function setUnstakedFeeManager(address _unstakedFeeManager) external;\n\n    /// @notice Updates the unstakedFeeModule of the factory\n    /// @dev Must be called by the current unstaked fee manager\n    /// @param _unstakedFeeModule The new unstakedFeeModule of the factory\n    function setUnstakedFeeModule(address _unstakedFeeModule) external;\n\n    /// @notice Updates the defaultUnstakedFee of the factory\n    /// @dev Must be called by the current unstaked fee manager\n    /// @param _defaultUnstakedFee The new defaultUnstakedFee of the factory\n    function setDefaultUnstakedFee(uint24 _defaultUnstakedFee) external;\n\n    /// @notice Enables a certain tickSpacing\n    /// @dev Tick spacings may never be removed once enabled\n    /// @param tickSpacing The spacing between ticks to be enforced in the pool\n    /// @param fee The default fee associated with a given tick spacing\n    function enableTickSpacing(int24 tickSpacing, uint24 fee) external;\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"interfaces/velodrome-finance/slipstream/contracts/core/interfaces/ICLFactory.sol": {
				"ICLFactory": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint24",
									"name": "oldUnstakedFee",
									"type": "uint24"
								},
								{
									"indexed": true,
									"internalType": "uint24",
									"name": "newUnstakedFee",
									"type": "uint24"
								}
							],
							"name": "DefaultUnstakedFeeChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnerChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"name": "PoolCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldFeeManager",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newFeeManager",
									"type": "address"
								}
							],
							"name": "SwapFeeManagerChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldFeeModule",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newFeeModule",
									"type": "address"
								}
							],
							"name": "SwapFeeModuleChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"name": "TickSpacingEnabled",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldFeeManager",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newFeeManager",
									"type": "address"
								}
							],
							"name": "UnstakedFeeManagerChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldFeeModule",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newFeeModule",
									"type": "address"
								}
							],
							"name": "UnstakedFeeModuleChanged",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "allPools",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "allPoolsLength",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "createPool",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "defaultUnstakedFee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"name": "enableTickSpacing",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								}
							],
							"name": "getPool",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"name": "getSwapFee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"name": "getUnstakedFee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"name": "isPair",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "poolImplementation",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint24",
									"name": "_defaultUnstakedFee",
									"type": "uint24"
								}
							],
							"name": "setDefaultUnstakedFee",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								}
							],
							"name": "setOwner",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_swapFeeManager",
									"type": "address"
								}
							],
							"name": "setSwapFeeManager",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_swapFeeModule",
									"type": "address"
								}
							],
							"name": "setSwapFeeModule",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_unstakedFeeManager",
									"type": "address"
								}
							],
							"name": "setUnstakedFeeManager",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_unstakedFeeModule",
									"type": "address"
								}
							],
							"name": "setUnstakedFeeModule",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "swapFeeManager",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "swapFeeModule",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								}
							],
							"name": "tickSpacingToFee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacings",
							"outputs": [
								{
									"internalType": "int24[]",
									"name": "",
									"type": "int24[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unstakedFeeManager",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unstakedFeeModule",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "3805",
				"formattedMessage": "Warning: This is a pre-release compiler version, please do not use it in production.\n\n",
				"message": "This is a pre-release compiler version, please do not use it in production.",
				"severity": "warning",
				"type": "Warning"
			}
		],
		"sources": {
			"interfaces/velodrome-finance/slipstream/contracts/core/interfaces/ICLFactory.sol": {
				"id": 0
			}
		}
	}
}