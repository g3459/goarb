{
	"id": "8ab7f530339d20b7ccfa5db3bb31167c",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.29-nightly.2024.11.27",
	"solcLongVersion": "0.8.29-nightly.2024.11.27+commit.8ea8efd9",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200000,
				"details": {
					"peephole": true,
					"inliner": true,
					"jumpdestRemover": true,
					"orderLiterals": true,
					"deduplicate": true,
					"cse": true,
					"constantOptimizer": true,
					"simpleCounterForLoopUncheckedIncrement": true,
					"yul": true,
					"yulDetails": {
						"stackAllocation": true
					}
				}
			},
			"evmVersion": "cancun",
			"viaIR": true,
			"debug": {
				"revertStrings": "default",
				"debugInfo": []
			},
			"metadata": {
				"appendCBOR": false,
				"useLiteralContent": true,
				"bytecodeHash": "none"
			},
			"outputSelection": {
				"*": {
					"*": [
						"evm.bytecode",
						"abi"
					]
				}
			},
			"remappings": []
		},
		"sources": {
			"interfaces/cryptoalgebra/Algebra/src/core/contracts/interfaces/IAlgebraFactory.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\npragma abicoder v2;\n\nimport './plugin/IAlgebraPluginFactory.sol';\nimport './vault/IAlgebraVaultFactory.sol';\n\n/// @title The interface for the Algebra Factory\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\ninterface IAlgebraFactory {\n  /// @notice Emitted when a process of ownership renounce is started\n  /// @param timestamp The timestamp of event\n  /// @param finishTimestamp The timestamp when ownership renounce will be possible to finish\n  event RenounceOwnershipStart(uint256 timestamp, uint256 finishTimestamp);\n\n  /// @notice Emitted when a process of ownership renounce cancelled\n  /// @param timestamp The timestamp of event\n  event RenounceOwnershipStop(uint256 timestamp);\n\n  /// @notice Emitted when a process of ownership renounce finished\n  /// @param timestamp The timestamp of ownership renouncement\n  event RenounceOwnershipFinish(uint256 timestamp);\n\n  /// @notice Emitted when a pool is created\n  /// @param token0 The first token of the pool by address sort order\n  /// @param token1 The second token of the pool by address sort order\n  /// @param pool The address of the created pool\n  event Pool(address indexed token0, address indexed token1, address pool);\n\n  /// @notice Emitted when a pool is created\n  /// @param deployer The corresponding custom deployer contract\n  /// @param token0 The first token of the pool by address sort order\n  /// @param token1 The second token of the pool by address sort order\n  /// @param pool The address of the created pool\n  event CustomPool(address indexed deployer, address indexed token0, address indexed token1, address pool);\n\n  /// @notice Emitted when the default community fee is changed\n  /// @param newDefaultCommunityFee The new default community fee value\n  event DefaultCommunityFee(uint16 newDefaultCommunityFee);\n\n  /// @notice Emitted when the default tickspacing is changed\n  /// @param newDefaultTickspacing The new default tickspacing value\n  event DefaultTickspacing(int24 newDefaultTickspacing);\n\n  /// @notice Emitted when the default fee is changed\n  /// @param newDefaultFee The new default fee value\n  event DefaultFee(uint16 newDefaultFee);\n\n  /// @notice Emitted when the defaultPluginFactory address is changed\n  /// @param defaultPluginFactoryAddress The new defaultPluginFactory address\n  event DefaultPluginFactory(address defaultPluginFactoryAddress);\n\n  /// @notice Emitted when the vaultFactory address is changed\n  /// @param newVaultFactory The new vaultFactory address\n  event VaultFactory(address newVaultFactory);\n\n  /// @notice role that can change communityFee and tickspacing in pools\n  /// @return The hash corresponding to this role\n  function POOLS_ADMINISTRATOR_ROLE() external view returns (bytes32);\n\n  /// @notice role that can call `createCustomPool` function\n  /// @return The hash corresponding to this role\n  function CUSTOM_POOL_DEPLOYER() external view returns (bytes32);\n\n  /// @notice Returns `true` if `account` has been granted `role` or `account` is owner.\n  /// @param role The hash corresponding to the role\n  /// @param account The address for which the role is checked\n  /// @return bool Whether the address has this role or the owner role or not\n  function hasRoleOrOwner(bytes32 role, address account) external view returns (bool);\n\n  /// @notice Returns the current owner of the factory\n  /// @dev Can be changed by the current owner via transferOwnership(address newOwner)\n  /// @return The address of the factory owner\n  function owner() external view returns (address);\n\n  /// @notice Returns the current poolDeployerAddress\n  /// @return The address of the poolDeployer\n  function poolDeployer() external view returns (address);\n\n  /// @notice Returns the default community fee\n  /// @return Fee which will be set at the creation of the pool\n  function defaultCommunityFee() external view returns (uint16);\n\n  /// @notice Returns the default fee\n  /// @return Fee which will be set at the creation of the pool\n  function defaultFee() external view returns (uint16);\n\n  /// @notice Returns the default tickspacing\n  /// @return Tickspacing which will be set at the creation of the pool\n  function defaultTickspacing() external view returns (int24);\n\n  /// @notice Return the current pluginFactory address\n  /// @dev This contract is used to automatically set a plugin address in new liquidity pools\n  /// @return Algebra plugin factory\n  function defaultPluginFactory() external view returns (IAlgebraPluginFactory);\n\n  /// @notice Return the current vaultFactory address\n  /// @dev This contract is used to automatically set a vault address in new liquidity pools\n  /// @return Algebra vault factory\n  function vaultFactory() external view returns (IAlgebraVaultFactory);\n\n  /// @notice Returns the default communityFee, tickspacing, fee and communityFeeVault for pool\n  /// @return communityFee which will be set at the creation of the pool\n  /// @return tickSpacing which will be set at the creation of the pool\n  /// @return fee which will be set at the creation of the pool\n  function defaultConfigurationForPool() external view returns (uint16 communityFee, int24 tickSpacing, uint16 fee);\n\n  /// @notice Deterministically computes the pool address given the token0 and token1\n  /// @dev The method does not check if such a pool has been created\n  /// @param token0 first token\n  /// @param token1 second token\n  /// @return pool The contract address of the Algebra pool\n  function computePoolAddress(address token0, address token1) external view returns (address pool);\n\n  /// @notice Deterministically computes the custom pool address given the customDeployer, token0 and token1\n  /// @dev The method does not check if such a pool has been created\n  /// @param customDeployer the address of custom plugin deployer\n  /// @param token0 first token\n  /// @param token1 second token\n  /// @return customPool The contract address of the Algebra pool\n  function computeCustomPoolAddress(address customDeployer, address token0, address token1) external view returns (address customPool);\n\n  /// @notice Returns the pool address for a given pair of tokens, or address 0 if it does not exist\n  /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n  /// @param tokenA The contract address of either token0 or token1\n  /// @param tokenB The contract address of the other token\n  /// @return pool The pool address\n  function poolByPair(address tokenA, address tokenB) external view returns (address pool);\n\n  /// @notice Returns the custom pool address for a customDeployer and a given pair of tokens, or address 0 if it does not exist\n  /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n  /// @param customDeployer The address of custom plugin deployer\n  /// @param tokenA The contract address of either token0 or token1\n  /// @param tokenB The contract address of the other token\n  /// @return customPool The pool address\n  function customPoolByPair(address customDeployer, address tokenA, address tokenB) external view returns (address customPool);\n\n  /// @notice returns keccak256 of AlgebraPool init bytecode.\n  /// @dev the hash value changes with any change in the pool bytecode\n  /// @return Keccak256 hash of AlgebraPool contract init bytecode\n  function POOL_INIT_CODE_HASH() external view returns (bytes32);\n\n  /// @return timestamp The timestamp of the beginning of the renounceOwnership process\n  function renounceOwnershipStartTimestamp() external view returns (uint256 timestamp);\n\n  /// @notice Creates a pool for the given two tokens\n  /// @param tokenA One of the two tokens in the desired pool\n  /// @param tokenB The other of the two tokens in the desired pool\n  /// @param data Data for plugin creation\n  /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0.\n  /// The call will revert if the pool already exists or the token arguments are invalid.\n  /// @return pool The address of the newly created pool\n  function createPool(address tokenA, address tokenB, bytes calldata data) external returns (address pool);\n\n  /// @notice Creates a custom pool for the given two tokens using `deployer` contract\n  /// @param deployer The address of plugin deployer, also used for custom pool address calculation\n  /// @param creator The initiator of custom pool creation\n  /// @param tokenA One of the two tokens in the desired pool\n  /// @param tokenB The other of the two tokens in the desired pool\n  /// @param data The additional data bytes\n  /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0.\n  /// The call will revert if the pool already exists or the token arguments are invalid.\n  /// @return customPool The address of the newly created custom pool\n  function createCustomPool(\n    address deployer,\n    address creator,\n    address tokenA,\n    address tokenB,\n    bytes calldata data\n  ) external returns (address customPool);\n\n  /// @dev updates default community fee for new pools\n  /// @param newDefaultCommunityFee The new community fee, _must_ be <= MAX_COMMUNITY_FEE\n  function setDefaultCommunityFee(uint16 newDefaultCommunityFee) external;\n\n  /// @dev updates default fee for new pools\n  /// @param newDefaultFee The new  fee, _must_ be <= MAX_DEFAULT_FEE\n  function setDefaultFee(uint16 newDefaultFee) external;\n\n  /// @dev updates default tickspacing for new pools\n  /// @param newDefaultTickspacing The new tickspacing, _must_ be <= MAX_TICK_SPACING and >= MIN_TICK_SPACING\n  function setDefaultTickspacing(int24 newDefaultTickspacing) external;\n\n  /// @dev updates pluginFactory address\n  /// @param newDefaultPluginFactory address of new plugin factory\n  function setDefaultPluginFactory(address newDefaultPluginFactory) external;\n\n  /// @dev updates vaultFactory address\n  /// @param newVaultFactory address of new vault factory\n  function setVaultFactory(address newVaultFactory) external;\n\n  /// @notice Starts process of renounceOwnership. After that, a certain period\n  /// of time must pass before the ownership renounce can be completed.\n  function startRenounceOwnership() external;\n\n  /// @notice Stops process of renounceOwnership and removes timer.\n  function stopRenounceOwnership() external;\n}\n"
			},
			"interfaces/cryptoalgebra/Algebra/src/core/contracts/interfaces/vault/IAlgebraVaultFactory.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Algebra Vault Factory\n/// @notice This contract can be used for automatic vaults creation\n/// @dev Version: Algebra Integral\ninterface IAlgebraVaultFactory {\n  /// @notice returns address of the community fee vault for the pool\n  /// @param pool the address of Algebra Integral pool\n  /// @return communityFeeVault the address of community fee vault\n  function getVaultForPool(address pool) external view returns (address communityFeeVault);\n\n  /// @notice creates the community fee vault for the pool if needed\n  /// @param pool the address of Algebra Integral pool\n  /// @return communityFeeVault the address of community fee vault\n  function createVaultForPool(\n    address pool,\n    address creator,\n    address deployer,\n    address token0,\n    address token1\n  ) external returns (address communityFeeVault);\n}\n"
			},
			"interfaces/cryptoalgebra/Algebra/src/core/contracts/interfaces/plugin/IAlgebraPluginFactory.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title An interface for a contract that is capable of deploying Algebra plugins\n/// @dev Such a factory can be used for automatic plugin creation for new pools.\n/// Also a factory be used as an entry point for custom (additional) pools creation\ninterface IAlgebraPluginFactory {\n  /// @notice Deploys new plugin contract for pool\n  /// @param pool The address of the new pool\n  /// @param creator The address that initiated the pool creation\n  /// @param deployer The address of new plugin deployer contract (0 if not used)\n  /// @param token0 First token of the pool\n  /// @param token1 Second token of the pool\n  /// @return New plugin address\n  function beforeCreatePoolHook(\n    address pool,\n    address creator,\n    address deployer,\n    address token0,\n    address token1,\n    bytes calldata data\n  ) external returns (address);\n\n  /// @notice Called after the pool is created\n  /// @param plugin The plugin address\n  /// @param pool The address of the new pool\n  /// @param deployer The address of new plugin deployer contract (0 if not used)\n  function afterCreatePoolHook(address plugin, address pool, address deployer) external;\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"interfaces/cryptoalgebra/Algebra/src/core/contracts/interfaces/IAlgebraFactory.sol": {
				"IAlgebraFactory": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "deployer",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"name": "CustomPool",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "newDefaultCommunityFee",
									"type": "uint16"
								}
							],
							"name": "DefaultCommunityFee",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "newDefaultFee",
									"type": "uint16"
								}
							],
							"name": "DefaultFee",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "defaultPluginFactoryAddress",
									"type": "address"
								}
							],
							"name": "DefaultPluginFactory",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "int24",
									"name": "newDefaultTickspacing",
									"type": "int24"
								}
							],
							"name": "DefaultTickspacing",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"name": "Pool",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "RenounceOwnershipFinish",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "finishTimestamp",
									"type": "uint256"
								}
							],
							"name": "RenounceOwnershipStart",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "RenounceOwnershipStop",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "newVaultFactory",
									"type": "address"
								}
							],
							"name": "VaultFactory",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "CUSTOM_POOL_DEPLOYER",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "POOLS_ADMINISTRATOR_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "POOL_INIT_CODE_HASH",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "customDeployer",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								}
							],
							"name": "computeCustomPoolAddress",
							"outputs": [
								{
									"internalType": "address",
									"name": "customPool",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								}
							],
							"name": "computePoolAddress",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "deployer",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "creator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "createCustomPool",
							"outputs": [
								{
									"internalType": "address",
									"name": "customPool",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "createPool",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "customDeployer",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								}
							],
							"name": "customPoolByPair",
							"outputs": [
								{
									"internalType": "address",
									"name": "customPool",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "defaultCommunityFee",
							"outputs": [
								{
									"internalType": "uint16",
									"name": "",
									"type": "uint16"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "defaultConfigurationForPool",
							"outputs": [
								{
									"internalType": "uint16",
									"name": "communityFee",
									"type": "uint16"
								},
								{
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "fee",
									"type": "uint16"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "defaultFee",
							"outputs": [
								{
									"internalType": "uint16",
									"name": "",
									"type": "uint16"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "defaultPluginFactory",
							"outputs": [
								{
									"internalType": "contract IAlgebraPluginFactory",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "defaultTickspacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasRoleOrOwner",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								}
							],
							"name": "poolByPair",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "poolDeployer",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnershipStartTimestamp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "newDefaultCommunityFee",
									"type": "uint16"
								}
							],
							"name": "setDefaultCommunityFee",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "newDefaultFee",
									"type": "uint16"
								}
							],
							"name": "setDefaultFee",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newDefaultPluginFactory",
									"type": "address"
								}
							],
							"name": "setDefaultPluginFactory",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "newDefaultTickspacing",
									"type": "int24"
								}
							],
							"name": "setDefaultTickspacing",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newVaultFactory",
									"type": "address"
								}
							],
							"name": "setVaultFactory",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startRenounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "stopRenounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "vaultFactory",
							"outputs": [
								{
									"internalType": "contract IAlgebraVaultFactory",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					}
				}
			},
			"interfaces/cryptoalgebra/Algebra/src/core/contracts/interfaces/plugin/IAlgebraPluginFactory.sol": {
				"IAlgebraPluginFactory": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "plugin",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "deployer",
									"type": "address"
								}
							],
							"name": "afterCreatePoolHook",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "creator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "deployer",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "beforeCreatePoolHook",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					}
				}
			},
			"interfaces/cryptoalgebra/Algebra/src/core/contracts/interfaces/vault/IAlgebraVaultFactory.sol": {
				"IAlgebraVaultFactory": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "creator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "deployer",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								}
							],
							"name": "createVaultForPool",
							"outputs": [
								{
									"internalType": "address",
									"name": "communityFeeVault",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"name": "getVaultForPool",
							"outputs": [
								{
									"internalType": "address",
									"name": "communityFeeVault",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"evm": {
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						}
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "3805",
				"formattedMessage": "Warning: This is a pre-release compiler version, please do not use it in production.\n\n",
				"message": "This is a pre-release compiler version, please do not use it in production.",
				"severity": "warning",
				"type": "Warning"
			}
		],
		"sources": {
			"interfaces/cryptoalgebra/Algebra/src/core/contracts/interfaces/IAlgebraFactory.sol": {
				"id": 0
			},
			"interfaces/cryptoalgebra/Algebra/src/core/contracts/interfaces/plugin/IAlgebraPluginFactory.sol": {
				"id": 1
			},
			"interfaces/cryptoalgebra/Algebra/src/core/contracts/interfaces/vault/IAlgebraVaultFactory.sol": {
				"id": 2
			}
		}
	}
}